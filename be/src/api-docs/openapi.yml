openapi: 3.0.3
info:
  title: Dashboard
  description: Describes the operations and schemas for Dashboard
  contact:
    email: adam.akiva14@gmail.co.il
  version: 0.0.0
servers:
  - url: http://localhost:2828/v0/api
tags:
  - name: general
  - name: user
paths:
  /health:
    get:
      servers:
        - url: http://localhost:2828
      tags:
        - general
      summary: Health check for the application
      description: Health check for the application
      responses:
        '204':
          description: The application is healthy
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
    head:
      servers:
        - url: http://localhost:2828
      tags:
        - general
      summary: Health check for the application
      description: Health check for the application
      responses:
        '204':
          description: The application is healthy
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
  /users:
    get:
      tags:
        - user
      summary: Find users
      description: >
        Find users. Without any query params the request will return all active
        users. If 'archive' query param is sent, **only** the archived users
        will be returned.
      parameters:
        - name: archive
          in: query
          description: Indicates whether to fetch **only** archived users
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: An array describing the fetched users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '413':
          $ref: '#/components/responses/PayloadTooLargeError'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - user
      summary: Create a new user
      description: Create a new user
      requestBody:
        $ref: '#/components/requestBodies/CreateUser'
      responses:
        '201':
          description: An object describing the created user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreatedUser'
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '413':
          $ref: '#/components/responses/PayloadTooLargeError'
        '500':
          $ref: '#/components/responses/ServerError'
  /users/{userId}:
    get:
      tags:
        - user
      summary: Find a user
      description: Find a user specified by the given id
      parameters:
        - name: userId
          in: path
          description: The id of a user you wish to fetch
          required: true
          schema:
            type: string
            format: uuid
            example: adb3271f-94dc-4169-80e9-3d4c8a90201f
      responses:
        '200':
          description: An object describing the fetched user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '413':
          $ref: '#/components/responses/PayloadTooLargeError'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - user
      summary: Update a user
      description: Update a user specified by the given id
      requestBody:
        $ref: '#/components/requestBodies/UpdateUser'
      parameters:
        - name: userId
          in: path
          description: The id of a user you wish to update
          required: true
          schema:
            type: string
            format: uuid
            example: adb3271f-94dc-4169-80e9-3d4c8a90201f
      responses:
        '200':
          description: An object describing the updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatedUser'
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '413':
          $ref: '#/components/responses/PayloadTooLargeError'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - user
      summary: Deactivate/Delete a user
      description: >
        Deactivate a user by default. If the user is already deactivate,
        they will be deleted instead. If the user does not exist, an empty
        string will be returned. The reasoning is that if a user does not exist,
        the deletion was successful (by definition, at the very least)
      parameters:
        - name: userId
          in: path
          description: The id of a user you wish to deactivate/delete
          required: true
          schema:
            type: string
            format: uuid
            example: adb3271f-94dc-4169-80e9-3d4c8a90201f
      responses:
        '200':
          description: >
            The deactivate/deleted user id on success. If the user does not exist,
            an empty string will be returned instead
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedUser'
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '413':
          $ref: '#/components/responses/PayloadTooLargeError'
        '500':
          $ref: '#/components/responses/ServerError'
  /users/reactivate/{userId}:
    patch:
      tags:
        - user
      summary: Reactivate a user
      description: >
        Reactivate a user specified by the given id. If the user is already
        active, the user id will be returned and nothing will occur
      parameters:
        - name: userId
          in: path
          description: The id of a user you wish to reactivate
          required: true
          schema:
            type: string
            format: uuid
            example: adb3271f-94dc-4169-80e9-3d4c8a90201f
      responses:
        '200':
          description: >
            The deactivate/deleted user id on success. If the user does not exist,
            an empty string will be returned instead
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReactivatedUser'
        '400':
          $ref: '#/components/responses/InvalidInputError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '413':
          $ref: '#/components/responses/PayloadTooLargeError'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  schemas:
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'
    User:
      type: object
      required:
        - id
        - email
        - firstName
        - lastName
        - phone
        - gender
        - address
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
          format: phone
        gender:
          type: string
          enum: [male, female, other]
        address:
          type: string
    CreatedUser:
      $ref: '#/components/schemas/User'
    UpdatedUser:
      $ref: '#/components/schemas/User'
    DeletedUser:
      type: string
      format: uuid
      example: adb3271f-94dc-4169-80e9-3d4c8a90201f
    ReactivatedUser:
      type: string
      format: uuid
      example: adb3271f-94dc-4169-80e9-3d4c8a90201f

    CreateUser:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
        - phone
        - gender
        - address
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
          format: phone
        gender:
          type: string
          enum: [male, female, other]
        address:
          type: string
    UpdateUser:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
          format: phone
        gender:
          type: string
          enum: [male, female, other]
        address:
          type: string
  requestBodies:
    CreateUser:
      description: An object describing user creation data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateUser'
    UpdateUser:
      description: An object describing user update data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateUser'
  responses:
    InvalidInputError:
      description: Invalid input
    UnauthorizedError:
      description: Request without authentication
    ForbiddenError:
      description: >
        Request with valid authentication, but the token has no permissions
        for this type of request
    NotFoundError:
      description: The requested entity does not exist
    PayloadTooLargeError:
      description: The request size is too large
    ServerError:
      description: Server related error
    GatewayTimeoutError:
      description: >
        The server, while acting as a proxy did not receive a response in time

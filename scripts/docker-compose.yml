version: "3.9"

services:
  dashboard-pg-dev:
    hostname: dashboard-pg-dev
    container_name: dashboard-pg-dev
    restart: unless-stopped
    image: postgres:16.1-alpine
    user: ${UID}:${GID}
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=dashboard-dev
    volumes:
      - ${DB_INIT_SCRIPT}:/docker-entrypoint-initdb.d/init.sql:ro
      - ../db-dev-data:/var/lib/postgresql/data:rw
      # See: https://github.com/docker-library/docs/blob/master/postgres/README.md#arbitrary---user-notes
      - /etc/passwd:/etc/passwd:ro
    stop_grace_period: 2s
    healthcheck:
      test: pg_isready -p 5432 -U admin -d dashboard-dev
      interval: 3s
      timeout: 2s
      retries: 5
    command: postgres -p 5432

################################################################################

  dashboard-pg-test:
    hostname: dashboard-pg-test
    container_name: dashboard-pg-test
    restart: unless-stopped
    image: postgres:16.1-alpine
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=dashboard-test
    volumes:
      - ${DB_INIT_SCRIPT}:/docker-entrypoint-initdb.d/init.sql:ro
    stop_grace_period: 2s
    healthcheck:
      test: pg_isready -p 5432 -U admin -d dashboard-test
      interval: 3s
      timeout: 2s
      retries: 5
    command: postgres -p 5432

################################################################################

  dashboard-be-dev:
    container_name: dashboard-be-dev
    restart: unless-stopped
    user: ${UID}:${GID}
    build:
      context: ../be
      dockerfile: Dockerfile
      target: be-dev
      args:
        DOCKER_BUILDKIT: 1
    environment:
      - SERVER_PORT=2828
      - SERVER_DEBUG_PORT=2829
      - TEST_SERVER_PORT=2830
      - SERVER_URL=http://localhost
      - API_ROUTE=v0/api
      - HEALTH_CHECK_ROUTE=health
      - ALLOWED_HOSTS=localhost
      - ALLOWED_ORIGINS=*
      - NODE_ENV=development
      - DB_URI=postgres://admin:admin@dashboard-pg-dev:5432/dashboard-dev
      - DB_TEST_URI=postgres://admin:admin@dashboard-pg-test:5432/dashboard-test
    volumes:
      - ../be:/home/node/dashboard:rw
      # Volume npm cache to speed up the npm install. This should allow cache reuse
      # whenever node_modules are removed.
      # See: https://docs.npmjs.com/cli/v6/using-npm/config#cache for reference
      - ./cache/be:/home/node/.npm:rw
    stop_grace_period: 2s
    # tty enables better log format for npm and debug. Using it in development
    # is not an issue, however, don't enable it production since there's no need
    tty: true
    stdin_open: true
    ports:
      - 2828:2828
      - 2829:2829
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -o /dev/null -w '%{http_code}' http://localhost:2828/health | grep -q '204'"
        ]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 30s
    depends_on:
      dashboard-pg-dev:
        condition: service_healthy
      dashboard-pg-test:
        condition: service_healthy
    command: npm run _start

################################################################################

  dashboard-fe-dev:
    container_name: dashboard-fe-dev
    restart: unless-stopped
    user: ${UID}:${GID}
    build:
      context: ../fe
      dockerfile: Dockerfile
      target: fe-dev
      args:
        DOCKER_BUILDKIT: 1
    environment:
      - CLIENT_PORT=5173
    volumes:
      - ../fe:/home/node/dashboard:rw
      # Volume npm cache to speed up the npm install. This should allow cache reuse
      # whenever node_modules are removed.
      # See: https://docs.npmjs.com/cli/v6/using-npm/config#cache for reference
      - ./cache/fe:/home/node/.npm:rw
    stop_grace_period: 2s
    # tty enables better log format for npm and debug. Using it in development
    # is not an issue, however, don't enable it production since there's no need
    tty: true
    stdin_open: true
    ports:
      - 5173:5173
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -o /dev/null -w '%{http_code}' http://localhost:5173 | grep -q '200'",
        ]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 30s
    command: npm run _start
